y <- hrp_update$Rent
# Set up the training/testing split
set.seed(seed)
train_ind <- sample(1:nrow(hrp_update), floor(0.8 * nrow(hrp_update)))
set.seed(NULL)
set.seed(seed_alter)
train_ind_alter <- sample(1:nrow(hrp_update), floor(0.8 * nrow(hrp_update)))
set.seed(NULL)
# Not scaled data
train <- hrp[train_ind, ]
test <- hrp[-train_ind, ]
# Not scaled data with alternative seed
train_alter_lin <- hrp[train_ind_alter, ]
test_alter_lin <- hrp[-train_ind_alter, ]
# Scaled data
train_scale <- hrp_update[train_ind, ]
test_scale <- hrp_update[-train_ind, ]
# Scaled data with alternative seed
train_alter <- hrp_update[train_ind_alter, ]
test_alter <- hrp_update[-train_ind_alter, ]
base_model <- lm(Rent ~ . - Area.Locality - Floor - Posted.On, data=train)
base_model2 <- lm(Rent ~ . - Area.Locality - Floor - Posted.On, data=train_alter_lin)
linear_model <- step(base_model, direction="backward")
linear_model2 <- step(base_model2, direction="backward")
linpred <- predict(linear_model, newdata=test)
test_linpred <-
test %>%
cbind(linpred) %>%
mutate(Resid.Square = (Rent-linpred)^2)
sqrt(sum(test_linpred$Resid.Square)/nrow(test_linpred))
linpred2 <- predict(linear_model2, newdata=test_alter_lin)
test_linpred2 <-
test_alter_lin %>%
cbind(linpred2) %>%
mutate(Resid.Square = (Rent-linpred2)^2)
sqrt(sum(test_linpred2$Resid.Square)/nrow(test_linpred2))
knitr::opts_chunk$set(echo = FALSE)
#| message = FALSE,
#| warning = FALSE
rm(list = ls()) # Clean environment
# Load libraries
library(psych)
library(tidyverse)
library(kableExtra)
library(modelr)
library(stats)
library(esquisse)
housing <- read.csv("housing.csv")
quanti_vars <- c("price", "area", "bedrooms", "bathrooms", "stories", "parking")
summary_stat <- psych::describe(housing[quanti_vars], skew = FALSE) %>%
round(2)
summary_stat %>%
kable(
caption = '<center>Table 1: Basic Statists of quantitative variables</center>',
booktabs = TRUE,
align = c('l', rep('c', 8))
) %>%
kableExtra::kable_styling(
bootstrap_options = c('striped', 'condensed'),
font_size = 14
)
#| warning = FALSE
# Convert categorical to indicator variables
housing <- housing %>%
mutate(
mainroad_var = ifelse(mainroad == "yes", 1, 0),
guestroom_var = ifelse(guestroom == "yes", 1, 0),
basement_var = ifelse(basement == "yes", 1, 0),
hotwaterheating_var = ifelse(hotwaterheating == "yes", 1, 0),
airconditioning_var = ifelse(airconditioning == "yes", 1, 0),
prefarea_var = ifelse(prefarea == "yes", 1, 0),
furnishingstatus_var = ifelse(furnishingstatus == "furnished", 1, 0) # Set other level of furnished as base group
)
# Create a data set to store all variables except categorical variable
housing_prep <- housing %>%
select(-mainroad, -basement, -guestroom, -hotwaterheating, -airconditioning, -prefarea, -furnishingstatus)
# Scaling the data set
xvars <- names(housing_prep)
housing_prep[ , xvars] <- scale(housing_prep[ , xvars], center = TRUE, scale = TRUE)
# Create and permute fold values
num_folds <- nrow(housing_prep) # Leave One Out Cross Validation
folds <- cut(x = 1:nrow(housing_prep), breaks = num_folds, labels = FALSE)
set.seed(123)
folds <- sample(folds)
set.seed(NULL)
# Cross Validation
RMSE_vec <- rep(NA, num_folds)
#Loop
for(i in 1:num_folds){
train_ind <- which(folds == i)
train <- housing_prep[train_ind, ]
test <- housing_prep[-train_ind, ]
temp_reg <- lm(price ~ .-price, data = train)
yhat <- predict(temp_reg, newdata = test)
mse <- mean((test$price - yhat)^2)
RMSE_vec[i] <- sqrt(mse)
}
#Find average RMSE values
RMSE_avg_full <- mean(RMSE_vec)
full_model <- lm(price ~ .-price, data = train) # Create a full model
summary(full_model)
shapiro.test(full_model$residuals)
int_only_model <- lm(price ~ 1, data = train)
stats::step(object = full_model,
scope = list(lower = int_only_model, upper = full_model),
data = train,
direction = "backward")
#| warning = FALSE
# Convert categorical to indicator variables
housing <- housing %>%
mutate(
mainroad_var = ifelse(mainroad == "yes", 1, 0),
guestroom_var = ifelse(guestroom == "yes", 1, 0),
basement_var = ifelse(basement == "yes", 1, 0),
hotwaterheating_var = ifelse(hotwaterheating == "yes", 1, 0),
airconditioning_var = ifelse(airconditioning == "yes", 1, 0),
prefarea_var = ifelse(prefarea == "yes", 1, 0),
furnishingstatus_var = ifelse(furnishingstatus == "furnished", 1, 0) # Set other level of furnished as base group
)
# Create a data set to store all variables except categorical variable
housing_prep <- housing %>%
select(-mainroad, -basement, -guestroom, -hotwaterheating, -airconditioning, -prefarea, -furnishingstatus)
# Scaling the data set
xvars <- names(housing_prep)
housing_prep[ , xvars] <- scale(housing_prep[ , xvars], center = TRUE, scale = TRUE)
# Create and permute fold values
num_folds <- nrow(housing_prep) # Leave One Out Cross Validation
folds <- cut(x = 1:nrow(housing_prep), breaks = num_folds, labels = FALSE)
set.seed(123)
folds <- sample(folds)
set.seed(NULL)
# Cross Validation
RMSE_vec <- rep(NA, num_folds)
#Loop
for(i in 1:num_folds){
train_ind <- which(folds == i)
train <- housing_prep[train_ind, ]
test <- housing_prep[-train_ind, ]
temp_reg <- lm(price ~ .-price, data = train)
yhat <- predict(temp_reg, newdata = test)
mse <- mean((test$price - yhat)^2)
RMSE_vec[i] <- sqrt(mse)
}
# Find average RMSE values
RMSE_avg_full <- mean(RMSE_vec)
# Create a full model to visualize
full_model <- lm(price ~ .-price, data = housing_prep) # Create a full model
summary(full_model)
#| warning = FALSE
# Convert categorical to indicator variables
housing <- housing %>%
mutate(
mainroad_var = ifelse(mainroad == "yes", 1, 0),
guestroom_var = ifelse(guestroom == "yes", 1, 0),
basement_var = ifelse(basement == "yes", 1, 0),
hotwaterheating_var = ifelse(hotwaterheating == "yes", 1, 0),
airconditioning_var = ifelse(airconditioning == "yes", 1, 0),
prefarea_var = ifelse(prefarea == "yes", 1, 0),
furnishingstatus_var = ifelse(furnishingstatus == "furnished", 1, 0) # Set other level of furnished as base group
)
# Create a data set to store all variables except categorical variable
housing_prep <- housing %>%
select(-mainroad, -basement, -guestroom, -hotwaterheating, -airconditioning, -prefarea, -furnishingstatus)
# Scaling the data set
xvars <- names(housing_prep)
housing_prep[ , xvars] <- scale(housing_prep[ , xvars], center = TRUE, scale = TRUE)
# Create and permute fold values
num_folds <- nrow(housing_prep) # Leave One Out Cross Validation
folds <- cut(x = 1:nrow(housing_prep), breaks = num_folds, labels = FALSE)
set.seed(123)
folds <- sample(folds)
set.seed(NULL)
# Cross Validation
RMSE_vec <- rep(NA, num_folds)
#Loop
for(i in 1:num_folds){
train_ind <- which(folds == i)
train <- housing_prep[train_ind, ]
test <- housing_prep[-train_ind, ]
temp_reg <- lm(price ~ .-price, data = train)
yhat <- predict(temp_reg, newdata = test)
mse <- mean((test$price - yhat)^2)
RMSE_vec[i] <- sqrt(mse)
}
# Find average RMSE values
RMSE_avg_full <- mean(RMSE_vec)
# Create a full model to visualize
full_model <- lm(price ~ .-price, data = housing_prep) # Create a full model
summary(full_model)
View(housing_prep)
#| warning = FALSE
# Convert categorical to indicator variables
housing <- housing %>%
mutate(
mainroad_var = ifelse(mainroad == "yes", 1, 0),
guestroom_var = ifelse(guestroom == "yes", 1, 0),
basement_var = ifelse(basement == "yes", 1, 0),
hotwaterheating_var = ifelse(hotwaterheating == "yes", 1, 0),
airconditioning_var = ifelse(airconditioning == "yes", 1, 0),
prefarea_var = ifelse(prefarea == "yes", 1, 0),
furnishingstatus_var = ifelse(furnishingstatus == "furnished", 1, 0) # Set other level of furnished as base group
)
# Create a data set to store all variables except categorical variable
housing_prep <- housing %>%
select(-mainroad, -basement, -guestroom, -hotwaterheating, -airconditioning, -prefarea, -furnishingstatus)
# Scaling the data set
xvars <- names(housing_prep)
housing_prep[ , xvars] <- scale(housing_prep[ , xvars], center = TRUE, scale = TRUE)
# Create and permute fold values
num_folds <- nrow(housing_prep) # Leave One Out Cross Validation
folds <- cut(x = 1:nrow(housing_prep), breaks = num_folds, labels = FALSE)
set.seed(123)
folds <- sample(folds)
inds <- sample(1:nrow(housing_prep), floor(.8*nrow(housing_prep)))
set.seed(NULL)
# Cross Validation
RMSE_vec <- rep(NA, num_folds)
#Loop
for(i in 1:num_folds){
train_ind <- which(folds == i)
train <- housing_prep[train_ind, ]
test <- housing_prep[-train_ind, ]
temp_reg <- lm(price ~ .-price, data = train)
yhat <- predict(temp_reg, newdata = test)
mse <- mean((test$price - yhat)^2)
RMSE_vec[i] <- sqrt(mse)
}
# Find average RMSE values
RMSE_avg_full <- mean(RMSE_vec)
# Create a full model to visualize
full_model <- lm(price ~ .-price, data = housing_prep[inds, ]) # Create a full model
summary(full_model)
shapiro.test(full_model$residuals)
qqnorm(full_model$residuals)
qqline(full_model$residuals)
plot(full_model, 3)
#| warning = FALSE
# Convert categorical to indicator variables
housing <- housing %>%
mutate(
mainroad_var = ifelse(mainroad == "yes", 1, 0),
guestroom_var = ifelse(guestroom == "yes", 1, 0),
basement_var = ifelse(basement == "yes", 1, 0),
hotwaterheating_var = ifelse(hotwaterheating == "yes", 1, 0),
airconditioning_var = ifelse(airconditioning == "yes", 1, 0),
prefarea_var = ifelse(prefarea == "yes", 1, 0),
furnishingstatus_var = ifelse(furnishingstatus == "furnished", 1, 0) # Set other level of furnished as base group
)
# Create a data set to store all variables except categorical variable
housing_prep <- housing %>%
select(-mainroad, -basement, -guestroom, -hotwaterheating, -airconditioning, -prefarea, -furnishingstatus)
# Scaling the data set
xvars <- names(housing_prep)
housing_prep[ , xvars] <- scale(housing_prep[ , xvars], center = TRUE, scale = TRUE)
# Create and permute fold values
num_folds <- nrow(housing_prep) # Leave One Out Cross Validation
folds <- cut(x = 1:nrow(housing_prep), breaks = num_folds, labels = FALSE)
set.seed(123)
folds <- sample(folds)
set.seed(NULL)
# Cross Validation
RMSE_vec <- rep(NA, num_folds)
#Loop
for(i in 1:num_folds){
train_ind <- which(folds == i)
train <- housing_prep[train_ind, ]
test <- housing_prep[-train_ind, ]
temp_reg <- lm(price ~ .-price, data = train)
yhat <- predict(temp_reg, newdata = test)
mse <- mean((test$price - yhat)^2)
RMSE_vec[i] <- sqrt(mse)
}
# Find average RMSE values
RMSE_avg_full <- mean(RMSE_vec)
# Create a full model to visualize
full_model <- lm(price ~ .-price, data = housing_prep) # Create a full model
summary(full_model)
shapiro.test(full_model$residuals)
qqnorm(full_model$residuals)
qqline(full_model$residuals)
plot(full_model, 3)
int_only_model <- lm(price ~ 1, data = train)
stats::step(object = full_model,
scope = list(lower = int_only_model, upper = full_model),
data = train,
direction = "backward")
final_model <- lm(price ~ area + bathrooms + stories + parking + mainroad_var + guestroom_var + basement_var + hotwaterheating_var + airconditioning_var + prefarea_var + furnishingstatus_var, data = train)
yhat2 <- predict(final_model, newdata = test)
MSE2 <- mean((test$price - yhat2)^2)
RMSE2 <- sqrt(MSE2)
# Cross Validation
RMSE_vec2 <- rep(NA, num_folds)
#Loop
for(i in 1:num_folds){
train_ind <- which(folds == i)
train <- housing_prep[train_ind, ]
test <- housing_prep[-train_ind, ]
temp_reg <- lm(price ~ area + bathrooms + stories + parking + mainroad_var + guestroom_var + basement_var + hotwaterheating_var + airconditioning_var + prefarea_var + furnishingstatus_var, data = train)
yhat <- predict(temp_reg, newdata = test)
mse <- mean((test$price - yhat)^2)
RMSE_vec[i] <- sqrt(mse)
}
#Find average RMSE values
RMSE_avg_final <- mean(RMSE_vec2)
# Cross Validation
RMSE_vec2 <- rep(NA, num_folds)
#Loop
for(i in 1:num_folds){
train_ind <- which(folds == i)
train <- housing_prep[train_ind, ]
test <- housing_prep[-train_ind, ]
temp_reg <- lm(price ~ area + bathrooms + stories + parking + mainroad_var + guestroom_var + basement_var + hotwaterheating_var + airconditioning_var + prefarea_var + furnishingstatus_var, data = train)
yhat <- predict(temp_reg, newdata = test)
mse <- mean((test$price - yhat)^2)
RMSE_vec2[i] <- sqrt(mse)
}
#Find average RMSE values
RMSE_avg_final <- mean(RMSE_vec2)
#| warning = FALSE
# Convert categorical to indicator variables
housing <- housing %>%
mutate(
mainroad_var = ifelse(mainroad == "yes", 1, 0),
guestroom_var = ifelse(guestroom == "yes", 1, 0),
basement_var = ifelse(basement == "yes", 1, 0),
hotwaterheating_var = ifelse(hotwaterheating == "yes", 1, 0),
airconditioning_var = ifelse(airconditioning == "yes", 1, 0),
prefarea_var = ifelse(prefarea == "yes", 1, 0),
furnishingstatus_var = ifelse(furnishingstatus == "furnished", 1, 0) # Set other level of furnished as base group
)
# Create a data set to store all variables except categorical variable
housing_prep <- housing %>%
select(-mainroad, -basement, -guestroom, -hotwaterheating, -airconditioning, -prefarea, -furnishingstatus)
# Scaling the data set
xvars <- names(housing_prep)
housing_prep[ , xvars] <- scale(housing_prep[ , xvars], center = TRUE, scale = TRUE)
# Create and permute fold values
num_folds <- nrow(housing_prep) # Leave One Out Cross Validation
folds <- cut(x = 1:nrow(housing_prep), breaks = num_folds, labels = FALSE)
set.seed(123)
folds <- sample(folds)
set.seed(NULL)
# Cross Validation
RMSE_vec <- rep(NA, num_folds)
#Loop
for(i in 1:num_folds){
train_ind <- which(folds == i)
train <- housing_prep[train_ind, ]
test <- housing_prep[-train_ind, ]
temp_reg <- lm(price ~ .-price, data = train)
yhat <- predict(temp_reg, newdata = test)
mse <- mean((test$price - yhat)^2)
RMSE_vec[i] <- sqrt(mse)
}
# Find average RMSE values
RMSE_avg_full <- mean(RMSE_vec)
# Create a full model to visualize
full_model <- lm(price ~ .-price, data = housing_prep) # Create a full model
summary(full_model)
#| warning = FALSE
# Convert categorical to indicator variables
housing <- housing %>%
mutate(
mainroad_var = ifelse(mainroad == "yes", 1, 0),
guestroom_var = ifelse(guestroom == "yes", 1, 0),
basement_var = ifelse(basement == "yes", 1, 0),
hotwaterheating_var = ifelse(hotwaterheating == "yes", 1, 0),
airconditioning_var = ifelse(airconditioning == "yes", 1, 0),
prefarea_var = ifelse(prefarea == "yes", 1, 0),
furnishingstatus_var = ifelse(furnishingstatus == "furnished", 1, 0) # Set other level of furnished as base group
)
# Create a data set to store all variables except categorical variable
housing_prep <- housing %>%
select(-mainroad, -basement, -guestroom, -hotwaterheating, -airconditioning, -prefarea, -furnishingstatus)
# Scaling the data set
xvars <- names(housing_prep)
housing_prep[ , xvars] <- scale(housing_prep[ , xvars], center = TRUE, scale = TRUE)
# Create and permute fold values
num_folds <- nrow(housing_prep) # Leave One Out Cross Validation
folds <- cut(x = 1:nrow(housing_prep), breaks = num_folds, labels = FALSE)
set.seed(123)
folds <- sample(folds)
set.seed(NULL)
# Cross Validation
RMSE_vec <- rep(NA, num_folds)
#Loop
for(i in 1:num_folds){
train_ind <- which(folds == i)
train <- housing_prep[train_ind, ]
test <- housing_prep[-train_ind, ]
temp_reg <- lm(price ~ .-price, data = train)
yhat <- predict(temp_reg, newdata = test)
mse <- mean((test$price - yhat)^2)
RMSE_vec[i] <- sqrt(mse)
}
# Find average RMSE values
RMSE_avg_full <- mean(RMSE_vec)
# Create a full model to visualize
full_model <- lm(price ~ .-price, data = housing_prep) # Create a full model
summary(full_model)
# Cross Validation
RMSE_vec2 <- rep(NA, num_folds)
#Loop
for(i in 1:num_folds){
train_ind <- which(folds == i)
train <- housing_prep[train_ind, ]
test <- housing_prep[-train_ind, ]
temp_reg <- lm(price ~ area + bathrooms + stories + parking + mainroad_var + guestroom_var + basement_var + hotwaterheating_var + airconditioning_var + prefarea_var + furnishingstatus_var, data = train)
yhat <- predict(temp_reg, newdata = test)
mse <- mean((test$price - yhat)^2)
RMSE_vec2[i] <- sqrt(mse)
}
#Find average RMSE values
RMSE_avg_final <- mean(RMSE_vec2)
int_only_model <- lm(price ~ 1, data = housing_prep)
stats::step(object = full_model,
scope = list(lower = int_only_model, upper = full_model),
data = train,
direction = "backward")
final_model <- lm(price ~ area + bathrooms + stories + parking + mainroad_var + guestroom_var + basement_var + hotwaterheating_var + airconditioning_var + prefarea_var + furnishingstatus_var, data = train)
yhat2 <- predict(final_model, newdata = test)
MSE2 <- mean((test$price - yhat2)^2)
RMSE2 <- sqrt(MSE2)
# Cross Validation
RMSE_vec2 <- rep(NA, num_folds)
#Loop
for(i in 1:num_folds){
train_ind <- which(folds == i)
train <- housing_prep[train_ind, ]
test <- housing_prep[-train_ind, ]
temp_reg <- lm(price ~ area + bathrooms + stories + parking + mainroad_var + guestroom_var + basement_var + hotwaterheating_var + airconditioning_var + prefarea_var + furnishingstatus_var, data = train)
yhat <- predict(temp_reg, newdata = test)
mse <- mean((test$price - yhat)^2)
RMSE_vec2[i] <- sqrt(mse)
}
#Find average RMSE values
RMSE_avg_final <- mean(RMSE_vec2)
View(housing_prep)
library(Matrix)
cat(rankMatrix(housing_prep), "\n")   #prints 4
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
#| message = FALSE
rm(list = ls()) # Clean environment
# Load libraries
library(psych)
library(tidyverse)
library(kableExtra)
library(modelr)
library(stats)
library(esquisse)
housing <- read.csv("housing.csv")
#| message = FALSE
rm(list = ls()) # Clean environment
# Load libraries
library(psych)
library(tidyverse)
library(kableExtra)
library(modelr)
library(stats)
library(esquisse)
housing <- read.csv("housing.csv")
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE)
#| message = FALSE
rm(list = ls()) # Clean environment
# Load libraries
library(psych)
library(tidyverse)
library(kableExtra)
library(modelr)
library(stats)
library(esquisse)
housing <- read.csv("housing.csv")
View(housing)
knitr::opts_chunk$set(echo = FALSE)
#| message = FALSE,
#| warning = FALSE
rm(list = ls()) # Clean environment
# Load libraries
library(psych)
library(tidyverse)
library(kableExtra)
library(modelr)
library(stats)
library(esquisse)
housing <- read.csv("housing.csv")
#| message = FALSE,
#| warning = FALSE
rm(list = ls()) # Clean environment
# Load libraries
library(psych)
library(tidyverse)
library(kableExtra)
library(modelr)
library(stats)
library(esquisse)
housing <- read.csv("housing.csv")
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE)
#| message = FALSE,
#| warning = FALSE
rm(list = ls()) # Clean environment
# Load libraries
library(psych)
library(tidyverse)
library(kableExtra)
library(modelr)
library(stats)
library(esquisse)
housing <- read.csv("housing.csv")
